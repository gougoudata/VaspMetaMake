##################
# This is a makefile to build VASP using its own makefiles but overriding values.
#


# VASP can't build in parallel due to some unspecified dependencies.
MAKE=make -j 1

CC    =icc
F90   =ifort
MPIF90=mpif90

SERIAL_LAPACK_FLAGS=-L$(MKL) -mkl
SERIAL_BLAS_FLAGS= 

# Older versions of MKL may require 'em64t' here
INTEL_ARCH=intel64

SCALAPACK_LD_FLAGS=$(MKLROOT)/lib/$(INTEL_ARCH)/libmkl_scalapack_lp64.a $(MKLROOT)/lib/$(INTEL_ARCH)/libmkl_blacs_lp64.a
SCALAPACK_CPP_FLAGS=-DscaLAPACK

# The scalapack build variable exists but isn't included in any line by default, so we ram
#  it in with the LAPACK ones.
MPI_LAPACK_FLAGS=-Wl,--start-group  \
								 $(MKLROOT)/lib/$(INTEL_ARCH)/libmkl_intel_lp64.a \
                 $(MKLROOT)/lib/$(INTEL_ARCH)/libmkl_sequential.a \
								 $(MKLROOT)/lib/$(INTEL_ARCH)/libmkl_core.a       \
								 $(SCALAPACK_LD_FLAGS)                            \
								 -Wl,--end-group    \
								 -lm
MPI_BLAS_FLAGS=

# The FFTWLIB environment variable is set by the FFTW modules
ifeq ($(FFTWLIB),fftw)
  SERIAL_FFT_OBJS=fftw3d.o fft3dlib.o $(FFTWDIR)/libfftw3.a
  MPI_FFT_OBJS   =fftmpiw.o fftmpi_map.o fftw3d.o fft3dlib.o $(FFTWDIR)/libfftw3.a
	F90 += -I$(FFTWINCLUDE)
	MPIF90 += -I$(FFTWINCLUDE)
	$(info Using FFTW from $(FFTWDIR)...)
else
  SERIAL_FFT_OBJS=fft3dfurth.o fft3dlib.o
  MPI_FFT_OBJS   =fftmpi.o fftmpi_map.o fft3dfurth.o fft3dlib.o
	$(info Using FFT library included in VASP...)
endif

# VASP doesn't really use a prefix for anything, so it's 
#   fine to build and then move later if you like.
#PREFIX=/opt/vasp-$(VASP_VER)


LIB_MAKEFILE   =makefile.linux_ifc_P4
NONLIB_MAKEFILE=makefile.linux_ifc_P4

LIB_MAKEVARS=FC=$(F90)

#######################################################################################
# Probably shouldn't need to modify anything below this line.
#

## Capture version based on files in working directory
VASP_VERSIONS_PRESENT=$(wildcard vasp.5.*.tar.gz)

ifeq ($(words $(VASP_VERSIONS_PRESENT)), 0)
	$(error No VASP .tar.gz found in current directory -- please supply a vasp.x.x.x.tar.gz file.)
endif

VASP_SOURCE_FILE=$(lastword $(VASP_VERSIONS_PRESENT) )
EXTRACTED_VERSION=$(patsubst vasp.%.tar.gz,%,$(VASP_SOURCE_FILE))
SPLIT_VERSION=$(subst ., ,$(EXTRACTED_VERSION))

VER_MAJ=$(word 1,$(SPLIT_VERSION))
VER_MIN=$(word 2,$(SPLIT_VERSION))
VER_MIC=$(word 3,$(SPLIT_VERSION))

VASP_VER = $(VER_MAJ).$(VER_MIN).$(VER_MIC)
# Note: as a side effect, this also removes anything between the microversion and the .tar.gz
#  such as the date inserted by our getvasp script. See the drama over the silent replacement of
#  version 5.3.3 for the rationale behind this.


## Put together submake arguments
BASE_MAKEVARS        =CPP="\$$(CPP_)  -DIFC -DCACHE_SIZE=12000 -DPGF90 -Davoidalloc -DHOST=\\\"LinuxIFC\\\" " 
SERIAL_MAKEVARS      =$(BASE_MAKEVARS) \
											'FC=$(F90)' \
											'BLAS=$(SERIAL_BLAS_FLAGS)' \
											'LAPACK=$(SERIAL_LAPACK_FLAGS)' \
											'FFT3D=$(SERIAL_FFT_OBJS)'

MPI_MAKEVARS         =$(BASE_MAKEVARS) \
											'FC=$(MPIF90)' \
											CPP+=-DMPI \
											'BLAS=$(MPI_BLAS_FLAGS)' \
											'LAPACK=$(MPI_LAPACK_FLAGS)' \
											'FFT3D=$(MPI_FFT_OBJS)' \
                      'CPP+=$(SCALAPACK_CPP_FLAGS)' 

ifeq ($(WITH_SCALAPACK),"y")
  MPI_MAKEVARS+="CPP+=$(SCALAPACK_CPP_FLAGS)" "SCA=$(SCALAPACK_LD_FLAGS)"
endif

SERIAL_NOCD_MAKEVARS =$(SERIAL_MAKEVARS)
SERIAL_CD_MAKEVARS   =$(SERIAL_MAKEVARS) CPP+=-DNGXhalf
SERIAL_GAMMA_MAKEVARS=$(SERIAL_MAKEVARS) CPP+=-DwNGXhalf
MPI_NOCD_MAKEVARS    =$(MPI_MAKEVARS)
MPI_CD_MAKEVARS      =$(MPI_MAKEVARS) CPP+=-DNGZhalf
MPI_GAMMA_MAKEVARS   =$(MPI_MAKEVARS) CPP+=-DwNGZhalf



# Vasp doesn't install any documentation, so I'm not sure the other things that usually go here are necessary. It might be worth expanding it to include an exec-prefix and the other one (the place for non-binary files) for PSP storage, though?

BUILD_DIR       =./
EXE_DIR         =$(BUILD_DIR)/exe

SERIAL_NOCD_DIR = $(BUILD_DIR)/$(VASP_VER)_src_serial_nocd
SERIAL_CD_DIR   = $(BUILD_DIR)/$(VASP_VER)_src_serial_cd
SERIAL_GAMMA_DIR= $(BUILD_DIR)/$(VASP_VER)_src_serial_gamma

MPI_NOCD_DIR    = $(BUILD_DIR)/$(VASP_VER)_src_mpi_nocd
MPI_CD_DIR      = $(BUILD_DIR)/$(VASP_VER)_src_mpi_cd
MPI_GAMMA_DIR   = $(BUILD_DIR)/$(VASP_VER)_src_mpi_gamma

SERIAL_NOCD_BIN =$(EXE_DIR)/vasp-$(VASP_VER)-serial_nocd
SERIAL_CD_BIN   =$(EXE_DIR)/vasp-$(VASP_VER)-serial_cd 
SERIAL_GAMMA_BIN=$(EXE_DIR)/vasp-$(VASP_VER)-serial_gamma
MPI_NOCD_BIN    =$(EXE_DIR)/vasp-$(VASP_VER)-mpi_nocd 
MPI_CD_BIN      =$(EXE_DIR)/vasp-$(VASP_VER)-mpi_cd 
MPI_GAMMA_BIN   =$(EXE_DIR)/vasp-$(VASP_VER)-mpi_gamma 

ALL_VERSIONS = \
               $(SERIAL_NOCD_BIN)  \
               $(SERIAL_CD_BIN)    \
							 $(SERIAL_GAMMA_BIN) \
							 $(MPI_NOCD_BIN)     \
							 $(MPI_CD_BIN)       \
							 $(MPI_GAMMA_BIN)

# Might also want to add VTST versions to the above.

# Not really necessary, but to remind me that it exists
.DEFAULT_GOAL := all

all: $(ALL_VERSIONS)
	:

.PHONY : all clean install test check distclean

install:
	:

clean:
	-'rm' -Rf $(EXE_DIR) $(SERIAL_NOCD_DIR) $(SERIAL_CD_DIR) $(SERIAL_GAMMA_DIR) $(MPI_NOCD_DIR) $(MPI_CD_DIR) $(MPI_GAMMA_DIR)

distclean: clean
	:

test check:
	$(error If only VASP included tests.)
	# Probably want to ask for a variable that does something like specify the queue submit commands, to test the MPI versions?
	:

$(SERIAL_NOCD_DIR) $(SERIAL_CD_DIR) $(SERIAL_GAMMA_DIR) $(MPI_NOCD_DIR) $(MPI_CD_DIR) $(MPI_GAMMA_DIR): $(VASP_SOURCE_FILE) 
	mkdir $@ && tar -xzf $(VASP_SOURCE_FILE) --strip-components 1 -C $@

$(SERIAL_NOCD_DIR)/vasp: vasp.5.lib/libdmy.a $(SERIAL_NOCD_DIR)
	cd $(SERIAL_NOCD_DIR) && $(MAKE) -f $(NONLIB_MAKEFILE) $(SERIAL_NOCD_MAKEVARS)

$(SERIAL_CD_DIR)/vasp: vasp.5.lib/libdmy.a $(SERIAL_CD_DIR)
	cd $(SERIAL_CD_DIR) && $(MAKE) -f $(NONLIB_MAKEFILE) $(SERIAL_CD_MAKEVARS)

$(SERIAL_GAMMA_DIR)/vasp: vasp.5.lib/libdmy.a $(SERIAL_GAMMA_DIR)
	cd $(SERIAL_GAMMA_DIR) && $(MAKE) -f $(NONLIB_MAKEFILE) $(SERIAL_GAMMA_MAKEVARS)

$(MPI_NOCD_DIR)/vasp: vasp.5.lib/libdmy.a $(MPI_NOCD_DIR)
	cd $(MPI_NOCD_DIR) && $(MAKE) -f $(NONLIB_MAKEFILE) $(MPI_NOCD_MAKEVARS)

$(MPI_CD_DIR)/vasp: vasp.5.lib/libdmy.a $(MPI_CD_DIR)
	cd $(MPI_CD_DIR) && $(MAKE) -f $(NONLIB_MAKEFILE) $(MPI_CD_MAKEVARS)

$(MPI_GAMMA_DIR)/vasp: vasp.5.lib/libdmy.a $(MPI_GAMMA_DIR)
	cd $(MPI_GAMMA_DIR) && $(MAKE) -f $(NONLIB_MAKEFILE) $(MPI_GAMMA_MAKEVARS)

$(SERIAL_NOCD_BIN): $(SERIAL_NOCD_DIR)/vasp $(EXE_DIR)
	cp $(SERIAL_NOCD_DIR)/vasp $(SERIAL_NOCD_BIN)

$(SERIAL_CD_BIN): $(SERIAL_CD_DIR)/vasp $(EXE_DIR)
	cp $(SERIAL_CD_DIR)/vasp $(SERIAL_CD_BIN)

$(SERIAL_GAMMA_BIN): $(SERIAL_GAMMA_DIR)/vasp $(EXE_DIR)
	cp $(SERIAL_GAMMA_DIR)/vasp $(SERIAL_GAMMA_BIN)

$(MPI_NOCD_BIN): $(MPI_NOCD_DIR)/vasp $(EXE_DIR)
	cp $(MPI_NOCD_DIR)/vasp $(MPI_NOCD_BIN)

$(MPI_CD_BIN): $(MPI_CD_DIR)/vasp $(EXE_DIR)
	cp $(MPI_CD_DIR)/vasp $(MPI_CD_BIN)

$(MPI_GAMMA_BIN): $(MPI_GAMMA_DIR)/vasp $(EXE_DIR)
	cp $(MPI_GAMMA_DIR)/vasp $(MPI_GAMMA_BIN)

vasp.$(VER_MAJ).lib/libdmy.a: $(BUILD_DIR)/vasp.5.lib
	cd $(BUILD_DIR)/vasp.5.lib && $(MAKE) -f $(LIB_MAKEFILE) $(LIB_MAKEVARS)

vasp.$(VER_MAJ).lib: vasp.$(VER_MAJ).lib.tar.gz
	tar -xzf vasp.$(VER_MAJ).lib.tar.gz

$(EXE_DIR):
	mkdir $(EXE_DIR)


